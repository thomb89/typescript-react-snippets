{
  "makeVar": {
    "scope": "typescriptreact,typescript",
    "prefix": "makeVar_apollo-client",
    "body": ["export const $2 = makeVar<$1>($3);"],
    "description": "makeVar from @apollo/client"
  },
  "mock": {
    "scope": "typescriptreact,typescript",
    "prefix": "mock_apollo-client",
    "description": "boilerplate to mock apollo-client operations ",
    "body": [
      "const ${1:named}Mock: MockedResponse${2}<${3}> = {",
      "  request: {",
      "    query: ${0},",
      "  },",
      "  result: undefined,",
      "  error: undefined",
      "};"
    ]
  },
  "gql": {
    "scope": "typescriptreact,typescript",
    "prefix": "gql_apllo-client",
    "body": [
      "import { gql } from '@apollo/client';",
      "",
      "export const ${1:name}Defs = gql`",
      "  ${2:query resolver($parameter: String!)} {",
      "    $0",
      "  }",
      "`;"
    ]
  },
  "useReactiveVar": {
    "scope": "typescriptreact",
    "prefix": "useReactiveVar_apollo-client",
    "body": ["const $1 = useReactiveVar$2($3);$0"],
    "description": "useReactiveVar hook from @apollo/client"
  }
}
