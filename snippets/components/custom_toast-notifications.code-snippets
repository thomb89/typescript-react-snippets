{
  "custom toast-notifications React.FC": {
    "prefix": "custom_toast-notifications",
    "body": [
      "import { useCallback, useEffect, useState, createContext, useContext, useReducer, Reducer, Dispatch, ReducerAction, useMemo } from 'react';",
      "import { createPortal } from 'react-dom';",
      "import { CheckCircleIcon, InformationCircleIcon, XCircleIcon, ExclamationCircleIcon, XIcon } from '@heroicons/react/solid';",
      "",
      "// ====================================================================================",
      "// TOAST TYPES",
      "// ====================================================================================",
      "//#region TYPES",
      "",
      "type toastId = string;",
      "",
      "export type toastType = 'info' | 'warning' | 'error' | 'success';",
      "",
      "export type toast = {",
      "  id?: toastId;",
      "  content: JSX.Element | string;",
      "  type: toastType;",
      "  duration?: number;",
      "  autoClose?: boolean;",
      "  buttons?: {",
      "    closeButton?: boolean;",
      "    onClose?: () => void;",
      "    messageResult?: (result: 'yes' | 'no') => void;",
      "  };",
      "};",
      "",
      "type toastState = {",
      "  toasts: toast[];",
      "};",
      "type contextReducer = Reducer<toastState, { type: 'addOrUpdateToast' | 'removeToast'; payload: any }>;",
      "type toastContext = {",
      "  state: toastState;",
      "  dispatch: Dispatch<ReducerAction<contextReducer>>;",
      "};",
      "",
      "export type useToastResult = {",
      "  addOrUpdateToast: (toast: toast) => void;",
      "  removeToast: (id: toastId) => void;",
      "};",
      "",
      "//#endregion",
      "",
      "// ====================================================================================",
      "// TOAST CONTEXT",
      "// ====================================================================================",
      "//#region CONTEXT",
      "",
      "const toastContext = createContext<toastContext>({ state: { toasts: [] }, dispatch: () => {} });",
      "toastContext.displayName = 'Toast-Context';",
      "const { Provider } = toastContext;",
      "",
      "//#endregion",
      "",
      "// ====================================================================================",
      "// TOAST EXPORTED HOOK",
      "// ====================================================================================",
      "//#region EXPORTED HOOK",
      "",
      "/**",
      " * react hook that uses the ToastContext to add, update or delete toasts from the context",
      " * @returns {*func} to add or update a toast (update is performed, when a toast with the same ID exists)",
      " * @returns {*func} to remove a toast",
      " */",
      "export const useToast = (): useToastResult => {",
      "  const { dispatch } = useContext<toastContext>(toastContext);",
      "",
      "  const addOrUpdateToast = useCallback((toast: toast) => dispatch({ type: 'addOrUpdateToast', payload: toast }), [dispatch]);",
      "  const removeToast = useCallback((toastId: toastId) => dispatch({ type: 'removeToast', payload: toastId }), [dispatch]);",
      "",
      "  return { addOrUpdateToast, removeToast };",
      "};",
      "",
      "//#endregion",
      "",
      "// ====================================================================================",
      "// TOASTPROVIDER RFC",
      "// ====================================================================================",
      "//#region TOASTPROVIDER RFC",
      "",
      "export type windowWithToast = Window & typeof globalThis & { addToast?: (toast: toast) => void; removeToast?: (toastId: toastId) => void };",
      "",
      "export type ToastProviderProps = {",
      "  maxDisplay: number;",
      "  duration?: number;",
      "  autoClose?: boolean;",
      "  className?: string;",
      "  toastOptions?: ToastProps;",
      "  types?: toastTypes;",
      "};",
      "",
      "/**",
      " * A React FC that Provides a Context for Toast-Notifications, creates a portal and renders notifications",
      " */",
      "export const ToastProvider: React.FC<ToastProviderProps> = ({ children, maxDisplay, duration, className, toastOptions, types, autoClose }) => {",
      "  const [portalRoot, setPortalRoot] = useState<HTMLElement | undefined>(undefined);",
      "",
      "  const [state, dispatch] = useReducer<Reducer<toastState, { type: 'addOrUpdateToast' | 'removeToast'; payload: any }>>(",
      "    (state, action): toastState => {",
      "      const { toasts } = state;",
      "",
      "      switch (action.type) {",
      "        case 'addOrUpdateToast':",
      "          const toast = action.payload as toast;",
      "          const newState: toastState = { toasts };",
      "",
      "          if (!toast.id) {",
      "            toast.id = `${Date.now().toString()}-${toast.type}`;",
      "          }",
      "",
      "          const toastExists = toasts.find((t) => t.id === toast.id);",
      "          if (toastExists) {",
      "            newState.toasts = toasts.map((t) => (t.id !== toast.id ? t : toast));",
      "          } else {",
      "            newState.toasts = [...toasts, toast];",
      "          }",
      "",
      "          return newState;",
      "        case 'removeToast':",
      "          return { toasts: toasts.filter((t) => t.id !== (action.payload as toastId)) };",
      "        default:",
      "          return state;",
      "      }",
      "    },",
      "    { toasts: [] }",
      "  );",
      "  const { toasts } = state;",
      "  useEffect(() => {",
      "    (window as windowWithToast).addToast = (toast: toast) => dispatch({ type: 'addOrUpdateToast', payload: toast });",
      "    (window as windowWithToast).removeToast = (toastId: toastId) => dispatch({ type: 'removeToast', payload: toastId });",
      "  }, [dispatch]);",
      "",
      "  const toastTypes = useMemo(",
      "    (): toastTypes => ({",
      "      success: {",
      "        icon: <CheckCircleIcon className=\"w-10 h-10\" />,",
      "        iconClassName: 'text-green-500',",
      "        borderClassName: 'border-green-500',",
      "        closeIcon: <XIcon />,",
      "        noIcon: <XIcon />,",
      "        yesIcon: <CheckIcon />,",
      "        buttonClassName: 'icon-button hover:bg-transparent border-green-500 text-green-500 hover:border-green-300 hover:text-green-300',",
      "        ...types?.success,",
      "      },",
      "      info: {",
      "        icon: <InformationCircleIcon className=\"w-10 h-10\" />,",
      "        iconClassName: 'text-blue-500',",
      "        borderClassName: 'border-blue-500',",
      "        closeIcon: <XIcon />,",
      "        noIcon: <XIcon />,",
      "        yesIcon: <CheckIcon />,",
      "        buttonClassName: 'icon-button hover:bg-transparent border-blue-500 text-blue-500 hover:border-blue-300 hover:text-blue-300',",
      "        ...types?.info,",
      "      },",
      "      warning: {",
      "        icon: <ExclamationCircleIcon className=\"w-10 h-10\" />,",
      "        iconClassName: 'text-orange-500',",
      "        borderClassName: 'border-orange-500',",
      "        closeIcon: <XIcon />,",
      "        noIcon: <XIcon />,",
      "        yesIcon: <CheckIcon />,",
      "        buttonClassName: 'icon-button hover:bg-transparent border-orange-500 text-orange-500 hover:border-orange-300 hover:text-orange-300',",
      "        ...types?.warning,",
      "      },",
      "      error: {",
      "        icon: <XCircleIcon className=\"w-10 h-10\" />,",
      "        iconClassName: 'text-red-500',",
      "        borderClassName: 'border-red-500',",
      "        closeIcon: <XIcon />,",
      "        noIcon: <XIcon />,",
      "        yesIcon: <CheckIcon />,",
      "        buttonClassName: 'icon-button hover:bg-transparent border-red-500 text-red-500 hover:border-red-300 hover:text-red-300',",
      "        ...types?.error,",
      "      },",
      "    }),",
      "    [types]",
      "  );",
      "",
      "  const DEFAULT_DURATION = 8000;",
      "  const defaultDuration = useMemo(() => duration ?? DEFAULT_DURATION, [duration]);",
      "  const defaultAnimation = useMemo(",
      "    () =>",
      "      toastOptions?.animation ?? {",
      "        startClassName: 'opacity-0',",
      "        endClassName: 'opacity-100',",
      "        animationClassName: 'transition-all duration-1000 ease-in',",
      "        duration: 1000,",
      "      },",
      "    []",
      "  );",
      "",
      "  useEffect(() => {",
      "    const id = 'toast-portal-root';",
      "    let root = document.getElementById(id) ?? document.createElement('div');",
      "    root.id = id;",
      "",
      "    if (portalRoot) document.body.appendChild(root!);",
      "    setPortalRoot(root);",
      "  }, [portalRoot]);",
      "",
      "  return (",
      "    <Provider value={{ state, dispatch }}>",
      "      {children}",
      "      {portalRoot &&",
      "        toasts.length > 0 &&",
      "        createPortal(",
      "          <div className={`${className ?? 'fixed top-1 right-1 w-full md:top-4 md:right-4 md:w-160 box-border text-white z-50'}`}>",
      "            {toasts.slice(0, maxDisplay).map((toast) => (",
      "              <Toast",
      "                key={toast.id}",
      "                {...toastOptions}",
      "                animation={defaultAnimation}",
      "                toast={{ duration: defaultDuration, autoClose, ...toast }}",
      "                removeToast={() => dispatch({ type: 'removeToast', payload: toast.id! })}",
      "                type={toastTypes[toast.type] as type}",
      "              />",
      "            ))}",
      "          </div>,",
      "          portalRoot",
      "        )}",
      "    </Provider>",
      "  );",
      "};",
      "",
      "//#endregion",
      "",
      "// ====================================================================================",
      "// TOAST RFC",
      "// ====================================================================================",
      "//#region TOAST RFC",
      "",
      "type type = {",
      "  icon: JSX.Element;",
      "  iconClassName: string;",
      "  borderClassName: string;",
      "  closeIcon: JSX.Element;",
      "  buttonClassName: string;",
      "  noIcon: JSX.Element;",
      "  yesIcon: JSX.Element;",
      "};",
      "export type toastTypes = {",
      "  success?: Partial<type>;",
      "  info?: Partial<type>;",
      "  warning?: Partial<type>;",
      "  error?: Partial<type>;",
      "};",
      "",
      "export type ToastProps = {",
      "  type?: type;",
      "  className?: string;",
      "  messageButtonsWrapperClassName?: string;",
      "  closeButton?: boolean;",
      "  toast: toast;",
      "  removeToast: () => void;",
      "  animation: {",
      "    startClassName: string;",
      "    endClassName: string;",
      "    animationClassName: string;",
      "    duration: number;",
      "  };",
      "};",
      "",
      "/**",
      " * A React FC to display a Toast-Notification",
      " */",
      "export const Toast: React.FC<ToastProps> = ({ type, className, toast, removeToast, animation, closeButton, messageButtonsWrapperClassName }) => {",
      "  const [animationState, setAnimationState] = useState<string>(animation.startClassName);",
      "",
      "  const close = useCallback(() => {",
      "    toast.buttons?.onClose?.();",
      "    removeToast();",
      "  }, [removeToast, toast.buttons]);",
      "",

      "  useEffect(() => {",
      "    setAnimationState(animation.endClassName);",
      "",
      "    if (toast.autoClose === false) return;",
      "",
      "    const animationTimeout = setTimeout(() => {",
      "      setAnimationState(animation.startClassName);",
      "    }, toast.duration! - animation.duration);",
      "",
      "    const timeout = setTimeout(() => {",
      "      if (toast.buttons?.messageResult) toast.buttons.messageResult('no');",
      "      close();",
      "    }, toast.duration);",
      "",
      "    return () => {",
      "      clearTimeout(animationTimeout);",
      "      clearTimeout(timeout);",
      "    };",
      "  }, []);",
      "",
      "  const displayCloseButton = useMemo(() => {",
      "    let displayCloseButton = true;",
      "    if (closeButton !== undefined) displayCloseButton = closeButton;",
      "    if (toast.buttons?.closeButton !== undefined) displayCloseButton = toast.buttons.closeButton;",
      "    if (toast.buttons?.messageResult) displayCloseButton = false;",
      "",
      "    return displayCloseButton;",
      "  }, [closeButton, toast]);",
      "",
      "  return (",
      "    <div",
      "      className={`${",
      "        className ?? `inline-flex gap-2 justify-between items-center box-border w-full m-1 p-4 bg-gray-800 rounded border-l-8 ${type?.borderClassName}`",
      "      } ${animation.animationClassName} ${animationState}`}>",
      "      <div className={`${type?.iconClassName ?? ''}`}>{type?.icon}</div>",
      "      <div style={{ width: '100%' }}>{toast.content}</div>",
      "      {displayCloseButton && (",
      "        <div>",
      "          <button onClick={close} className={type?.buttonClassName ?? ''}>",
      "            {type?.closeIcon}",
      "          </button>",
      "        </div>",
      "      )}",
      "      {toast.buttons?.messageResult && (",
      "        <div className={`${messageButtonsWrapperClassName} ?? inline-flex gap-2`}>",
      "          <button",
      "            onClick={() => {",
      "              toast.buttons?.messageResult?.('yes');",
      "              close();",
      "            }}",
      "            className={type?.buttonClassName ?? ''}>",
      "            {type?.yesIcon}",
      "          </button>",
      "          <button",
      "            onClick={() => {",
      "              toast.buttons?.messageResult?.('no');",
      "              close();",
      "            }}",
      "            className={type?.buttonClassName ?? ''}>",
      "            {type?.noIcon}",
      "          </button>",
      "        </div>",
      "      )}",
      "    </div>",
      "  );",
      "};",
      "",
      "//#endregion",
      ""
    ],
    "description": "custom toast-notifications"
  }
}
