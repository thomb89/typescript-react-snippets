{
  "jest environment that sets up a prisma database": {
    "prefix": "jest_prisma-test-env",
    "body": [
      "// @ts-check",
      "const path = require('path');",
      "const fs = require('fs');",
      "const util = require('util');",
      "const NodeEnvironment = require('jest-environment-node');",
      "const { nanoid } = require('nanoid');",
      "//const dotenvt = require('dotenv')",
      "",
      "const exec = util.promisify(require('child_process').exec);",
      "// non workspace binary path",
      "// const prismaBinary = path.join(__dirname, '..', 'node_modules', '.bin', 'prisma');",
      "",
      "// workspace binary path",
      "const prismaBinary = path.join(__dirname, '..', '..', '..', 'node_modules', '.bin', 'prisma');",
      "",
      "class PrismaTestEnvironment extends NodeEnvironment {",
      "  /**",
      "   * @param {import(\"@jest/types/build/Config\").ProjectConfig} config",
      "   */",
      "  constructor(config) {",
      "    super(config);",
      "",
      "   // Generate a unique sqlite identifier for this test context",
      "   // Generate a unique sqlite identifier for this test context",
      "   // SQLITE",
      "   // this.dbName = `test_${nanoid()}.db`;",
      "   // process.env.DATABASE_URL = `file:${this.dbName}`;",
      "   // this.global.process.env.DATABASE_URL = `file:${this.dbName}`;",
      "   // this.dbPath = path.join(__dirname, this.dbName);",
      "",
      "   // POSTGRES",
      "   // this.dbPath = undefined;",
      "   // process.env.DATABASE_URL = `postgresql://${1:username}:${2:password}@localhost:5432/${nanoid()}?schema=public`;",
      "   // this.global.process.env.DATABASE_URL = process.env.DATABASE_URL;",
      "",
      "   // setup",
      "   dotenv.config({ path: path.join(__dirname, '..', '.env') })",
      "",
      "  }",
      "",
      "  setup = async () => {",
      "    // Run the migrations to ensure our schema has the required structure",
      "    await exec(`${prismaBinary} db push --skip-generate`);",
      "    await exec(`${prismaBinary} db seed --preview-feature`);",
      "    return super.setup();",
      "  };",
      "",
      "  teardown = async () => {",
      "    const unlink = async () => {",
      "      if (!this.dbPath) return;",
      "",
      "      try {",
      "        await fs.promises.unlink(this.dbPath);",
      "      } catch (error) {",
      "        if (JSON.stringify(error).includes('EBUSY')) await unlink();",
      "        else throw error;",
      "      }",
      "    };",
      "",
      "    await unlink();",
      "  };",
      "}",
      "",
      "module.exports = PrismaTestEnvironment;",
      ""
    ],
    "description": "jest environment that sets up a prisma database, this file should be place in the folder, where your schema.prisma is placed (default: ./prisma).\n in jest.config.js -> testEnvironment: path.join(__dirname, 'prisma', 'jest environment that sets up a prisma database'),"
  }
}
